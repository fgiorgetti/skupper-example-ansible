title: Skupper Hello World using Ansible
sites:
  west:
    title: Terminal
    platform: kubernetes
    namespace: west
    env:
      KUBECONFIG: $PWD/ansible/kubeconfigs/west
  east:
    platform: kubernetes
    namespace: east
    env:
      KUBECONFIG: $PWD/ansible/kubeconfigs/east
steps:
  - standard: general/install_the_skupper_command_line_tool
    # XXX The ansible tasks use the kubectl and skupper commands
  - title: Install the Skupper Ansible collection
    preamble: |
      Use the `ansible-galaxy` command to install the
      `skupper.network` collection.
    commands:
      west:
        - run: ansible-galaxy collection install skupper.network
  - title: Set up your clusters
    preamble: |
      This example uses two clusters.  The clusters are accessed using
      two kubeconfig files:

      ~~~
      <project-dir>/ansible/kubeconfigs/east
      <project-dir>/ansible/kubeconfigs/west
      ~~~

      For each kubeconfig, set the `KUBECONFIG` environment variable
      to the file path and run the login command for your cluster.
      This updates the kubeconfig with the required credentials.

      **Note:** The cluster login procedure varies by provider.  See
      the documentation for yours:

      * [Minikube](https://skupper.io/start/minikube.html#cluster-access)
      * [Amazon Elastic Kubernetes Service (EKS)](https://skupper.io/start/eks.html#cluster-access)
      * [Azure Kubernetes Service (AKS)](https://skupper.io/start/aks.html#cluster-access)
      * [Google Kubernetes Engine (GKE)](https://skupper.io/start/gke.html#cluster-access)
      * [IBM Kubernetes Service](https://skupper.io/start/ibmks.html#cluster-access)
      * [OpenShift](https://skupper.io/start/openshift.html#cluster-access)
    commands:
      west:
        - run: |
            export KUBECONFIG=<project-dir>/ansible/kubeconfigs/east
            # Enter your provider-specific login command for cluster 1
            export KUBECONFIG=<project-dir>/ansible/kubeconfigs/west
            # Enter your provider-specific login command for cluster 2
          apply: readme
  - title: Inspect the inventory file
    preamble: |
      Before we start running commands, let's examine the inventory
      file.  It is here that we can define Skupper sites, links, and
      exposed services.

      [ansible/inventory.yml](ansible/inventory.yml):

      ~~~ yaml
      all:
        vars:
          ansible_connection: local
        hosts:
          east:
            kubeconfig: "{{ inventory_dir }}/kubeconfigs/east"
            namespace: east
            links:
              - host: west
            services:
              backend:
                ports:
                  - 8080
                targets:
                  - type: deployment
                    name: backend
          west:
            kubeconfig: "{{ inventory_dir }}/kubeconfigs/west"
            namespace: west
      ~~~

      Our example has two sites, East and West, enumerated under
      `hosts`.

      The `links` attribute on host `east` defines a link from East to West.

      The `services` attribute on host `east` exposes the backend on
      East so the frontend in West can access it.

      The playbooks that follow use this inventory data to set up and
      tear down the Skupper network.

      For more information about inventory files, see
      [X][ansible-inventory] and [Y][skupper-inventory].

      [ansible-inventory]: https://docs.ansible.com/ansible/latest/getting_started/get_started_inventory.html
      [skupper-inventory]: https://mit.edu/
  - title: Run the setup playbook
    preamble: |
      Now let's look at the setup playbook.

      [ansible/setup.yml](ansible/setup.yml):

      ~~~ yaml
      - hosts: east
        tasks:
          - command: "kubectl apply -f {{ playbook_dir }}/kubernetes/east.yaml"

      - hosts: west
        tasks:
          - command: "kubectl apply -f {{ playbook_dir }}/kubernetes/west.yaml"

      - hosts: all
        collections:
          - skupper.network
        tasks:
          - import_role:
              name: skupper
      ~~~

      The two `kubectl` tasks deploy our example application.

      The last task is to use the `skupper` role from the
      `skupper.network` collection to deploy the Skupper network.

      Use the `ansible-playbook` command to run the playbook:
    commands:
      west:
        - run: ansible-playbook -i ansible/inventory.yml ansible/setup.yml
          output: |
            [...]

            PLAY RECAP *********************************************************************************************
            east             : ok=34   changed=13   unreachable=0    failed=0    skipped=69   rescued=0    ignored=0
            west             : ok=34   changed=12   unreachable=0    failed=0    skipped=69   rescued=0    ignored=0
  - standard: hello_world/access_the_frontend
    commands:
      west:
        - run: export KUBECONFIG=<project-dir>/ansible/kubeconfigs/west
          apply: readme
        - await_resource: deployment/frontend
        - run: kubectl port-forward deployment/frontend 8080:8080
          apply: readme
        - run: kubectl port-forward deployment/frontend 8080:8080 > /dev/null &
          apply: test
        - await_port: 8080
        - run: curl http://localhost:8080/api/health
          apply: test
  - title: Run the teardown playbook
    name: cleaning_up
    preamble: |
      To clean everything up, run the teardown playbook.

      [ansible/teardown.yml](ansible/teardown.yml):

      ~~~ yaml
      - hosts: all
        collections:
          - skupper.network
        tasks:
        - import_role:
            name: skupper_delete

      - hosts: east
        tasks:
          - command: "kubectl delete -f {{ playbook_dir }}/kubernetes/east.yaml"

      - hosts: west
        tasks:
          - command: "kubectl delete -f {{ playbook_dir }}/kubernetes/west.yaml"
      ~~~

      The `skupper_delete` role from the `skupper.network` collection
      removes all the Skupper resources.
    commands:
      west:
        - run: ansible-playbook -i ansible/inventory.yml ansible/teardown.yml
          output: |
            [...]

            PLAY RECAP *********************************************************************************************
            east             : ok=9    changed=2    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0
            west             : ok=9    changed=2    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0
