title: Skupper Hello World using Ansible
sites:
  west:
    title: Terminal
    platform: kubernetes
    namespace: west
    env:
      KUBECONFIG: /tmp/skewer/kubeconfig-west
  east:
    platform: kubernetes
    namespace: east
    env:
      KUBECONFIG: /tmp/skewer/kubeconfig-east
steps:
  - standard: general/install_the_skupper_command_line_tool
    # XXX The ansible tasks use the kubectl and skupper commands
  - title: Install the Skupper Ansible collection
    commands:
      west:
        - run: ansible-galaxy collection install skupper.network
  - title: Set up your clusters
    preamble: |
      Skupper is designed for use with multiple Kubernetes clusters.
      The `skupper` and `kubectl` commands use your
      [kubeconfig][kubeconfig] to select the cluster where they
      operate.

      [kubeconfig]: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/

      Your kubeconfig is stored in a file in your home directory.  The
      `skupper` and `kubectl` commands use the `KUBECONFIG` environment
      variable to locate it.

      A single kubeconfig supports only one active cluster per user.
      Since you will be using multiple clusters at once in this
      exercise, you need to create distinct kubeconfigs.

      For each cluster, set the `KUBECONFIG` environment variable to a
      different path and log in.

      **Note:** The login procedure varies by provider.  See the
      documentation for yours:

      * [Minikube](https://skupper.io/start/minikube.html#cluster-access)
      * [Amazon Elastic Kubernetes Service (EKS)](https://skupper.io/start/eks.html#cluster-access)
      * [Azure Kubernetes Service (AKS)](https://skupper.io/start/aks.html#cluster-access)
      * [Google Kubernetes Engine (GKE)](https://skupper.io/start/gke.html#cluster-access)
      * [IBM Kubernetes Service](https://skupper.io/start/ibmks.html#cluster-access)
      * [OpenShift](https://skupper.io/start/openshift.html#cluster-access)
    commands:
      west:
        - run: export KUBECONFIG=/tmp/skewer/kubeconfig-west
        - run: "# Enter your provider-specific login command for cluster 1"
        - run: export KUBECONFIG=/tmp/skewer/kubeconfig-east
        - run: "# Enter your provider-specific login command for cluster 2"
  - title: Inspect the inventory file
    preamble: |
      Before we start running commands, let's examine the example
      inventory file.  It is here that we define Skupper sites, links,
      and exposed services.

      <!-- [inventory]: https://docs.ansible.com/ansible/latest/getting_started/get_started_inventory.html -->

      [ansible/inventory.yml](ansible/inventory.yml):

      ~~~ yaml
      all:
        vars:
          ansible_connection: local
        hosts:
          east:
            kubeconfig: /tmp/skewer/kubeconfig-east
            namespace: east
            links:
              - host: west
            services:
              backend:
                ports:
                  - 8080
                targets:
                  - type: deployment
                    name: backend
          west:
            kubeconfig: /tmp/skewer/kubeconfig-west
            namespace: west
      ~~~

      Our example has two sites, East and West.

      East has a link to West.

      East exposes its backend service on the network.

      The playbook commands that follow use this inventory data to set
      up and tear down the Skupper network.
  - title: Run the setup playbook
    preamble: |
      The setup playbook has everything, but let's look at the
      important pieces of it before we run it.

      [ansible/setup.yml](ansible/setup.yml):

      ~~~ yaml
      - hosts: east
        tasks:
          - command: "kubectl apply -f {{ playbook_dir }}/kubernetes/east.yaml"

      - hosts: west
        tasks:
          - command: "kubectl apply -f {{ playbook_dir }}/kubernetes/west.yaml"

      - hosts: all
        collections:
          - skupper.network
        tasks:
          - import_role:
              name: skupper
      ~~~

      The `skupper` role from the `skupper.network` collection uses
      the inventory data to deploy Skupper.
    commands:
      west:
        - run: ansible-playbook -i ansible/inventory.yml ansible/setup.yml
          output: |
            [...]

            PLAY RECAP *******************************************************************************************************
            east                       : ok=34   changed=13   unreachable=0    failed=0    skipped=69   rescued=0    ignored=0
            west                       : ok=34   changed=12   unreachable=0    failed=0    skipped=69   rescued=0    ignored=0
  - standard: hello_world/access_the_frontend
    commands:
      west:
        - run: export KUBECONFIG=~/.kube/config-west
          apply: readme
        - await_resource: deployment/frontend
        - run: kubectl port-forward deployment/frontend 8080:8080
          apply: readme
        - run: kubectl port-forward deployment/frontend 8080:8080 > /dev/null &
          apply: test
        - await_port: 8080
        - run: curl http://localhost:8080/api/health
          apply: test
  - title: Run the teardown playbook
    name: cleaning_up
    preamble: |
      The reverse of the setup playbook.

      [ansible/teardown.yml](ansible/teardown.yml):

      ~~~ yaml
      - hosts: all
        collections:
          - skupper.network
        tasks:
        - import_role:
            name: skupper_delete

      - hosts: east
        tasks:
          - command: "kubectl delete -f {{ playbook_dir }}/kubernetes/east.yaml"

      - hosts: west
        tasks:
          - command: "kubectl delete -f {{ playbook_dir }}/kubernetes/west.yaml"
      ~~~

      The `skupper_delete` role from the `skupper.network` collection
      removes all the Skupper resources.
    commands:
      west:
        - run: ansible-playbook -i ansible/inventory.yml ansible/teardown.yml
          output: |
            [...]

            PLAY RECAP *******************************************************************************************************
            east                       : ok=9    changed=2    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0
            west                       : ok=9    changed=2    unreachable=0    failed=0    skipped=3    rescued=0    ignored=0
